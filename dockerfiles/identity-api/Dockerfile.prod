FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 8080


FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

COPY ["./app/server/IdentityService/src/DuendeIdentityServer/DuendeIdentityServer.csproj", "DuendeIdentityServer/"]
COPY ["./app/server/IdentityService/src/IdentityService.Application/IdentityService.Application.csproj", "IdentityService.Application/"]
COPY ["./app/server/IdentityService/src/IdentityService.Domain/IdentityService.Domain.csproj", "IdentityService.Domain/"]
COPY ["./app/server/IdentityService/src/IdentityService.Infrastructure/IdentityService.Infrastructure.csproj", "IdentityService.Infrastructure/"]
COPY ["./app/server/Contract/Contract/Published", "Contract/"]

# Building the services
WORKDIR "/src/DuendeIdentityServer"
RUN dotnet restore --packages "../nuget" --verbosity normal
COPY ["./app/server/IdentityService/src","/src"]
RUN dotnet build "./DuendeIdentityServer.csproj" --packages "../nuget" -c $BUILD_CONFIGURATION -o /app/build 

FROM build AS publish
# Have to add work dir, because dotnet publish will scan entire fs, make the docker hang with NAT network
WORKDIR "/src/DuendeIdentityServer"
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./DuendeIdentityServer.csproj" --packages "../nuget"  -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

USER root
# Ensure the app user owns the ./keys directory
RUN chown -R app:app ./keys/
RUN chmod -R 755 ./keys/
USER app

ENTRYPOINT ["dotnet", "DuendeIdentityServer.dll"]