#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

COPY ["./app/server/RecipeService/src/RecipeService.API/RecipeService.API.csproj", "RecipeService.API/"]
COPY ["./app/server/RecipeService/src/RecipeService.Application/RecipeService.Application.csproj", "RecipeService.Application/"]
COPY ["./app/server/RecipeService/src/RecipeService.Infrastructure/RecipeService.Infrastructure.csproj", "RecipeService.Infrastructure/"]
COPY ["./app/server/RecipeService/src/RecipeService.Domain/RecipeService.Domain.csproj", "RecipeService.Domain/"]
COPY ["./app/server/Contract/Contract/Published", "Contract/"]

# Building the services
WORKDIR "/src/RecipeService.API"
RUN dotnet restore --packages "../nuget" --verbosity normal
COPY ["./app/server/RecipeService/src","/src"]
RUN dotnet build --packages "../nuget" -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
# Have to add work dir, because dotnet publish will scan entire fs, make the docker hang with NAT network
WORKDIR "/src/RecipeService.API"
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish --packages "../nuget" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "RecipeService.API.dll"]