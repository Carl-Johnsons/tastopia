version: "3.8"

services:
    postgres:
        image: postgres:17.0-alpine
        container_name: postgres
        volumes:
            - ./data/db:/var/lib/postgresql/data
        ports:
            # PostgreSQL uses the default port 5432
            - "${DB_PORT}:5432"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        restart: always
        networks:
            - back-end
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
            interval: 10s
            timeout: 3s
            retries: 10
            start_period: 10s

    rabbitmq:
        # login guest:guest
        image: rabbitmq:4.0.2-management
        hostname: "rabbitmq"
        container_name: service-bus
        restart: always
        labels:
            NAME: "rabbitmq"
        ports:
            - "${RABBITMQ_PORT}:5672"
            - "${RABBITMQ_MANAGEMENT_PORT}:15672"
        networks:
            - back-end
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
            RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
            RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: true
        volumes:
            - "./data/mq:/var/lib/rabbitmq"
        healthcheck:
            test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
            interval: 10s
            timeout: 10s
            start_period: 10s
            retries: 5

    redis:
        image: redis:8.0-M02-alpine
        container_name: redis
        networks:
            - back-end

    api-gateway:
        build:
            context: .
            dockerfile: ./dockerfiles/api-gateway/Dockerfile.${DOCKERFILE_API_GATEWAY_ENV:-prod}
        container_name: apigateway
        ports:
            - "${API_GATEWAY_PORT}:80"
        networks:
            - back-end
        env_file:
            - .env.production
            - ./app/server/APIGateway/.env
        develop:
            watch:
                - path: ./app/server/APIGateway/src
                  action: sync
                  target: /src
                  ignore:
                      - Contract/
    identity-api:
        build:
            context: .
            dockerfile: ./dockerfiles/identity-api/Dockerfile.${DOCKERFILE_IDENTITY_ENV:-prod}
        container_name: identity-service
        ports:
            - "${IDENTITY_SERVICE_PORT}:80"
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - back-end
        env_file:
            - .env.production
            - ./app/server/IdentityService/.env
        develop:
            watch:
                - path: ./app/server/IdentityService/src
                  action: sync
                  target: /src
                  ignore:
                      - Contract/

    notification-api:
        build:
            context: .
            dockerfile: ./dockerfiles/notification-api/Dockerfile.${DOCKERFILE_NOTIFICATION_ENV:-prod}
        container_name: notification-service
        ports:
            - "${NOTIFICATION_SERVICE_PORT}:80"
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - back-end
        env_file:
            - .env.production
            - ./app/server/NotificationService/.env
        develop:
            watch:
                - path: ./app/server/NotificationService/src
                  action: sync
                  target: /src
                  ignore:
                      - Contract/
networks:
    back-end:
    front-end:
