#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
# Comment this user in order to use the app/ocelot.json
#USER app
WORKDIR /app
EXPOSE 80
EXPOSE 443
EXPOSE 5000

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

COPY ["./app/server/APIGateway/src/APIGateway/APIGateway.csproj", "./APIGateway/"]
COPY ["./app/server/Contract/Contract/Published", "Contract/"]

WORKDIR "/src/APIGateway"
RUN dotnet restore "./APIGateway.csproj" --packages "../nuget" --verbosity normal
COPY ["./app/server/APIGateway/src/APIGateway","."]
RUN dotnet build "./APIGateway.csproj" --packages "../nuget" -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
# Have to add work dir, because dotnet publish will scan entire fs, make the docker hang with NAT network
WORKDIR "/src/APIGateway"
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./APIGateway.csproj" --packages "../nuget" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

COPY ./ssl/certs/root-ca.crt /usr/local/share/ca-certificates/ca.crt
COPY ./ssl/certs/self-root-ca.crt /usr/local/share/ca-certificates/ca.crt
RUN update-ca-certificates

ENTRYPOINT ["dotnet", "APIGateway.dll"]